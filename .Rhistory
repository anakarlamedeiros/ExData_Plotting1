setwd("~/MyDataScienceProjects_Unpublished/4. Exploratory Data Analysis")
?abline
?with
?lty
?par
library(datasets)
data(cars)
View(cars)
with(cars, plot(speed,dist))
library(lattice)
state <- data.frame(state.x77, region=state.region)
View(state)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
library(lattice)
state <- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
data(mpg)
data(mpg)
qplot(dipl, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
View(mpg)
library(datasets)
data(cars)
with(cars, plot(speed,dist))
library(lattice)
state <- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data=mpg)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month=factor(Month))
View(airquality)
airquality <- transform(airquality, Month=factor(Month))
boxplot(Ozone ~ Month, airquality, xlab="Month", ylab="Ozone (ppb)")
colors()
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City") ## add a title
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone), main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City"))
?subset
subset(airquality, Month==5)
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City"))
with(subset(airquality, Month==5), points(Wind, Ozone, col="blue"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City", type="n"))
with(subset(airquality, Month==5), points(Wind, Ozone, col="blue"))
with(subset(airquality, Month!=5), points(Wind, Ozone, col="blue"))
with(subset(airquality, Month!=5), points(Wind, Ozone, col="red"))
legend("topright", pch=1, col=c("blue", "red"), legend=c("May", "Other months"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City", pch=20))
?lm
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd=2)
par(mfrow = c(1,2))
par(mfrow = c(1,2))
with(airquality, {
plot(Wind, Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(2,1))
with(airquality, {
plot(Wind, Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1,2))
with(airquality, {
plot(Wind, Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in NY City", outer=TRUE)
})
?examples
?example
example("points")
example("points")
example(points)
pdf(file="myplot.pdf")
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main="Old faithful Geyser data")
dev.off()
setwd("~/git_repositories/data-science-specialization/GettingAndCleaningDataProject")
#############################################################
## Loading the needed libraries
#############################################################
library(data.table)
library(reshape2)
#############################################################
## Auxiliary functions to create the tidy dataset
## (see main body below for details on the actual processing of the tidy dataset)
#############################################################
## Function: isMedianOrMeanMeasurement
## This function checks whether a measurement label contains
## the substrings "mean()" or "std()".
isMedianOrMeanMeasurement <- function (measurement=""){
## testing whether measurement refers to the mean or standard deviation
return(length(grep("mean()", measurement, fixed=TRUE)) > 0
|| length(grep("std()", measurement, fixed=TRUE)) > 0)
}
## Function: processDataset
## This function reads and process the dataset based on the locations
## provided as arguments.
## The processing steps includes:
##      * Keeping only the columns with the mean and standard deviation
##        for each measurement
##      * Adding a column for the subjects
##      * Adding columns with the activity identifier and the activity
processDataset <- function(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubject, colNameSubjectID,
fileAcivityClassifications, fileDataset){
## Reading the files given as input
#### Reading the feature labels for the columns in dataset
featuresLabels <- read.table(fileFeatureLabels)
indexMeasurementsToKeep <- which(sapply(featuresLabels$V2,isMedianOrMeanMeasurement))
#### Reading the activity labels for the dataset
activityLabels <- read.table(fileActivityLabels)
colnames(activityLabels) <- c(colActivityID, colActivity)
#### Reading the subject identifiers (ID) for the dataset
subjectsIDs <- read.table(fileSubject)
colnames(subjectsIDs) <- colNameSubjectID
#### Reading the activity identifiers for the dataset
activityClassification <- read.table(fileAcivityClassifications)
colnames(activityClassification) <- c(colActivityID)
activityClassification <- merge(activityClassification, activityLabels,
by.x=colActivityID, by.y=colActivityID,
all=TRUE, sort=FALSE)
#### Reading the dataset
dataset <- read.table(fileDataset)
colnames(dataset) <- featuresLabels[,2]
## Processing the dataset to return
#### Extracting the mean and standard deviations measurements
dataset <- dataset[, indexMeasurementsToKeep]
#### Adding the subjects and the activities to the dataset
processedDataset <- cbind(subjectsIDs, activityClassification, dataset)
#### returning the processed dataset
return (processedDataset)
}
## Function: processTestDataset
## This function creates the processed test dataset
## by calling the function 'processDataset' above
processTestDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the test files
locationTestDirectoryData <- paste(locationMainDirectoryData, "/test", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTestSet <- paste(locationTestDirectoryData, "/X_test.txt", sep="")
fileSubjectTests <- paste(locationTestDirectoryData, "/subject_test.txt", sep="")
fileAcivityClassifications <- paste(locationTestDirectoryData, "/y_test.txt", sep="")
processedTestDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTests, colNameSubjectID,
fileAcivityClassifications,
fileTestSet)
return (processedTestDataset)
}
## Function: processTrainingDataset
## This function creates the processed training dataset
## by calling the function 'processDataset' above
processTrainingDataset <- function(colNameSubjectID, colActivityID,
colActivity, locationMainDirectoryData){
## Setting the locations of the training files
locationTrainingDirectoryData <- paste(locationMainDirectoryData, "/train", sep="")
fileFeatureLabels <- paste(locationMainDirectoryData, "/features.txt", sep="")
fileActivityLabels <- paste(locationMainDirectoryData, "/activity_labels.txt", sep="")
fileTrainingSet <- paste(locationTrainingDirectoryData, "/X_train.txt", sep="")
fileSubjectTraining <- paste(locationTrainingDirectoryData, "/subject_train.txt", sep="")
fileAcivityClassifications <- paste(locationTrainingDirectoryData, "/y_train.txt", sep="")
processedTrainingDataset <- processDataset(fileFeatureLabels,
fileActivityLabels, colActivityID, colActivity,
fileSubjectTraining, colNameSubjectID,
fileAcivityClassifications,
fileTrainingSet)
return (processedTrainingDataset)
}
## Function: createTidyDataColumns
## This function renames the columns of the tidy dataset
## that refer to variables in the original data. The
## renaming consists of adding the prefix "AVERAGE_"
## to these column names.
createTidyDataColumns <- function (tidyDataColumnNames){
## The first 3 column names remain unchanged
columnNames <- tidyDataColumnNames[1:3]
## The remaining column names refer to variables
## and have the prefix "AVERAGE_" added to them
for(i in 4:length(tidyDataColumnNames) ){
columnNames <- c(columnNames, paste("AVERAGE", tidyDataColumnNames[i], sep="_"))
}
return(columnNames)
}
#############################################################
### main body of the program to create the tidy dataset
#############################################################
## setting the column names to use regarding the subjects and activities
colNameSubjectID <- "SUBJECT_IDENTIFIER"
colActivityID <- "ACTIVITY_IDENTIFIER"
colActivity <- "ACTIVITY_LABEL"
## setting the main location of the directory with the test and training sets
locationMainDirectoryDatasets <- "./UCI_HAR_Dataset"
## setting the output location for the tidy dataset
locationTidyDataset <- "./tidy_UCI_HAR_Dataset.txt"
## creating the processed test and training datasets
processedTestDataset <- processTestDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
processedTrainingDataset <- processTrainingDataset(colNameSubjectID, colActivityID, colActivity, locationMainDirectoryDatasets)
## merging the processed test and training datasets
processedMergedDataset <- rbind(processedTestDataset, processedTrainingDataset)
## creating the tidy data set with the averages for every unique combination (subject, activity)
meltedMergedData <- melt(processedMergedDataset, id.vars = c(colNameSubjectID, colActivityID, colActivity))
tidyData <- dcast(meltedMergedData, SUBJECT_IDENTIFIER + ACTIVITY_IDENTIFIER + ACTIVITY_LABEL ~ variable, fun=mean)
## renaming the columns of the tidy dataset to reflect that values are the averages of the variables
colnames(tidyData) <- createTidyDataColumns(colnames(tidyData))
## writing the tidy dataset to a file
write.table(tidyData,locationTidyDataset, row.names=FALSE, sep=",")
View(processedMergedDataset)
table(processedMergedDataset[,c("SUBJECT_IDENTIFIER", "ACTIVITY_LABEL")])
setwd("~/git_repositories")
setwd("~/git_repositories/ExData_Plotting1")
fileToDownload = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
fileToDownload = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
outputFile = "./househould_power_consuption.zip"
download.file(fileToDownload, outputFile)
data <- read.csv(unz(outputFile, "household_power_consumption.txt"))
View(data)
data <- read.csv(unz(outputFile, "household_power_consumption.txt"), sep=";")
View(data)
class(data$Date)
class(data$Date[1])
class(data$Date[[1]])
class(data$Date[[1,1]])
class(data[1,"Date"])
class(data[,"Date"])
library(dply)
library(dplyr)
View(data)
plot1Data <- mutate(data, Date = as.Date(Date))
View(plot1Data)
plot1Data <- mutate(data, Date = as.Date(Date, format="%d-%m-%Y"))
plot1Data <- mutate(data, Date = as.Date(Date, format="%d-%m-%Y"))
View(plot1Data)
plot1Data <- mutate(data, Date = as.Date(Date, format="%d/%m/%Y"))
View(plot1Data)
str(plot1Data)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Time = strptime(Time, format="%H:%M:%S"))
str(plot1Data)
View(plot1Data)
data$Time[1]
strptime(data$Time[1], format="%H:%M:%S")
as.POSIXct(data$Time[1])
as.POSIXct(data$Time[1], format="%H:%M:%S")
as.POSIXlt(data$Time[1], format="%H:%M:%S")
plot1Data <- filter(data,
Date == "01/02/2007")
View(plot1Data)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"))
View(plot1Data)
plot1Data <- filter(plot1Data,
Date == 2007-02-01)
View(plot1Data)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"))
View(plot1Data)
Date = as.Date(Date, format="%d/%m/%Y"))
plot1Data <- filter(plot1Data,
Date > "2007-02-01")
plot1Data <- filter(plot1Data,
Date > "2007-02-01")
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"))
View(plot1Data)
plot1Data <- filter(plot1Data,
Date >= "2007-02-01" & Date <= "2007-02-02" )
table(data$Date)
1440 + 1440
str(plot1Data)
View(plot1Data)
hist(plot1Data$Global_active_power)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Global_active_power = as.numeric(Global_active_power))
## Selecting the measurements for the 1st and the 2nd of February 2007
plot1Data <- filter(plot1Data,
Date >= "2007-02-01" & Date <= "2007-02-02" )
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Global_active_power = as.numeric(Global_active_power))
## Selecting the measurements for the 1st and the 2nd of February 2007
plot1Data <- filter(plot1Data,
Date >= "2007-02-01" & Date <= "2007-02-02" )
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Global_active_power = as.numeric(Global_active_power))
View(plot1Data)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Global_active_power = as.double(Global_active_power))
## This file creates plot 1
############################################
## Loading the relevant libraries
############################################
library(dplyr)
############################################
## Reading the input file
############################################
fileToDownload = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
outputFile = "./househould_power_consuption.zip"
download.file(fileToDownload, outputFile)
data <- read.csv(unz(outputFile, "household_power_consumption.txt"), sep=";")
View(data)
as.numeric("4.126")
as.numeric(data$Global_active_power[1])
class(data$Global_active_power[1])
as.character(data$Global_active_power[1])
as.numeric(as.character(data$Global_active_power[1]))
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Global_active_power = as.numeric(as.character(Global_active_power)))
table(data$Global_active_power)
table(plot1Data$Global_active_power)
View(plot1Data)
View(plot1Data)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Global_active_power = as.numeric(as.character(Global_active_power)))
View(plot1Data)
## Converting the column "Date" to the date format
plot1Data <- mutate(data,
DateXX = as.Date(Date, format="%d/%m/%Y"),
Global_active_powerXX = as.numeric(as.character(Global_active_power)))
View(plot1Data)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"),
Global_active_power = as.numeric(as.character(Global_active_power)))
View(plot1Data)
plot1Data <- mutate(data,
Date = as.Date(Date, format="%d/%m/%Y"))
View(plot1Data)
plot1Data <- filter(plot1Data,
Date >= "2007-02-01" & Date <= "2007-02-02" )
View(plot1Data)
View(data)
View(data)
View(data)
plot2Data <- mutate(plot1Data,
Global_active_power = as.numeric(as.character(Global_active_power)))
View(plot2Data)
str(plot2Data)
str(plot1Data)
str(plot1Data)
plot1Data <- mutate(plot1Data,
Global_active_power = as.numeric(as.character(Global_active_power)))
str(plot1Data)
View(plot1Data)
hist(plot1Data$Global_active_power)
table(plot1Data$Global_active_power)
which(is.na(plot1Data$Global_active_power))
which(!is.na(plot1Data$Global_active_power))
hist(plot1Data$Global_active_power, breaks=12)
par(1,1)
hist(plot1Data$Global_active_power, breaks=12)
hist(plot1Data$Global_active_power, breaks=12)
hist(plot1Data$Global_active_power, breaks=12)
par(1,1)
hist(plot1Data$Global_active_power, breaks=12)
